head	1.25;
access;
symbols;
locks; strict;
comment	@# @;


1.25
date	99.12.09.02.22.52;	author end70;	state Exp;
branches;
next	1.24;

1.24
date	99.12.08.23.30.13;	author end70;	state Exp;
branches;
next	1.23;

1.23
date	99.12.08.21.21.33;	author end70;	state Exp;
branches;
next	1.22;

1.22
date	99.12.08.21.16.34;	author end70;	state Exp;
branches;
next	1.21;

1.21
date	99.12.08.20.55.20;	author end70;	state Exp;
branches;
next	1.20;

1.20
date	99.12.08.20.43.12;	author end70;	state Exp;
branches;
next	1.19;

1.19
date	99.12.08.20.41.52;	author end70;	state Exp;
branches;
next	1.18;

1.18
date	99.12.08.20.38.29;	author end70;	state Exp;
branches;
next	1.17;

1.17
date	99.12.08.20.37.36;	author end70;	state Exp;
branches;
next	1.16;

1.16
date	99.12.08.20.37.27;	author end70;	state Exp;
branches;
next	1.15;

1.15
date	99.12.08.20.36.50;	author end70;	state Exp;
branches;
next	1.14;

1.14
date	99.12.08.20.35.38;	author end70;	state Exp;
branches;
next	1.13;

1.13
date	99.12.08.20.34.57;	author end70;	state Exp;
branches;
next	1.12;

1.12
date	99.12.08.20.33.12;	author end70;	state Exp;
branches;
next	1.11;

1.11
date	99.12.08.20.32.50;	author end70;	state Exp;
branches;
next	1.10;

1.10
date	99.12.08.20.08.17;	author end70;	state Exp;
branches;
next	1.9;

1.9
date	99.12.08.19.05.27;	author end70;	state Exp;
branches;
next	1.8;

1.8
date	99.12.08.18.59.33;	author end70;	state Exp;
branches;
next	1.7;

1.7
date	99.12.08.18.58.33;	author end70;	state Exp;
branches;
next	1.6;

1.6
date	99.12.08.18.25.36;	author end70;	state Exp;
branches;
next	1.5;

1.5
date	99.12.08.18.24.39;	author end70;	state Exp;
branches;
next	1.4;

1.4
date	99.12.08.18.16.47;	author end70;	state Exp;
branches;
next	1.3;

1.3
date	99.12.08.18.15.26;	author end70;	state Exp;
branches;
next	1.2;

1.2
date	99.12.08.18.15.05;	author end70;	state Exp;
branches;
next	1.1;

1.1
date	99.12.08.18.14.36;	author end70;	state Exp;
branches;
next	;


desc
@@


1.25
log
@*** empty log message ***
@
text
@#-----------------------------------------------------------------------
# $Header: /usr/end70/mnt/admin/perl/Parse/Parse/FixedLength.pm,v 1.24 1999/12/08 23:30:13 end70 Exp end70 $

=head1 NAME

Parse::FixedLength - parse a string containing fixed length fields into
component parts

=head1 SYNOPSIS

    use Parse::FixedLength;
    
    $phone_number=8037814191;
    parse_FL($phone_number,
	     \%moms_phone, 
	     [ 
	       {'area_code' => 3},
	       {'exchange'  => 3},
	       {'number'    => 4} ] );

    for (keys %moms_phone) {
      print $_, " ", $moms_phone{$_}, $/;
    }


    # yields $moms_phone{area_code} == 803
    #        $moms_phone{exchange}  == 781
    #        $moms_phone{number}    == 4191

    
=cut

#-----------------------------------------------------------------------

package Parse::FixedLength;
#use strict;

#-----------------------------------------------------------------------

=head1 DESCRIPTION

The C<Parse::FixedLength> module facilitates the process of breaking
a string into its fixed-length components.

=cut

#-----------------------------------------------------------------------

require Exporter;
use Carp;

#-----------------------------------------------------------------------
#	Public Global Variables
#-----------------------------------------------------------------------
use vars qw($VERSION @@ISA @@EXPORT @@EXPORT_OK);
$VERSION   = '1.00';
@@ISA       = qw(Exporter);
@@EXPORT    = qw(quick_parse);

#-----------------------------------------------------------------------
#	Global Variables for Program Use 
#-----------------------------------------------------------------------
@@parse_record=();


#=======================================================================

=head1 PARSING ROUTINES

There is one parsing routine: C<parse()>.

=over 8

=item parse()

This function takes a string, a reference to a hash and a reference to a 
list of hashes and stores the results of fixed length parsing into the hash 
reference passed in.

=item quick_parse()

To facilitate the parsing of certain common fixed-length strings, the
C<quick_parse()> function takes the name of an LOH (list of hashes) 
containing formatting information, a string, and a reference to a hah in 
which to store parsing results. The currently available formatting routines
are:

=over 4
item * C<@@us_phone> 
item * C<@@us_ssan> 
item * C<@@us_dob> 
item * C<@@us_dob_long_year> 

=back

=cut

#=======================================================================
sub parse {
    my ($string_to_parse, $hash_ref, $parse_instruction_ref) = @@_;
    my $offset=0;
    my $parse_record;
    my $parsed_string;

    $parse_record="Parsed [$string_to_parse]: ";

    foreach $parse_instruction (@@{$parse_instruction_ref}) {
	for (keys %{$parse_instruction}) {
#	    print $_, " ", $parse_instruction->{$_},$/;
	    my $length=$parse_instruction->{$_};
	    $parsed_string=substr($string_to_parse, $offset, $length), $/;
	    $hash_ref->{$_}=$parsed_string;
	    $offset += $length;
	    $parse_record .= "\n\t/$_/ $parsed_string";
	    add_to_parse_record;
	}
    }

    push @@parse_record, $parse_record;

}

#=======================================================================
sub quick_parse {
    my ($name_of_formatting_LOH, $string_to_parse, $hash_ref) = @@_;
    my $offset=0;
    
    parse($string_to_parse,
	     $hash_ref,
	     \@@{$name_of_formatting_LOH});
}

#=======================================================================

=head1 DIAGNOSTIC ROUTINES

There is one diagnostic routine: C<print_parsed()>.

=over 8

=item print_parsed()

This function prints all parses performed.

=back
=cut

#=======================================================================
sub print_parsed {
    map { print "$_\n" } (@@parse_record);
}



#-----------------------------------------------------------------------

=head1 EXAMPLES

see SYNOPSIS

=head1 AUTHOR

Terrence Brannon E<lt>tbrannon@@end70.comE<gt>

=head1 COPYRIGHT

Copyright (c) 1999 End70 Corporation

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=cut

#-----------------------------------------------------------------------

#=======================================================================
# initialisation code - stuff the DATA into the CODES hash
#=======================================================================
{
@@us_phone= ( 
	     {'area_code' => 3},
	     {'exchange'  => 3},
	     {'number'    => 4} 
	     );

@@us_ssan= ( 
	     {'A' =>  3},
	     {'B' =>  2},
	     {'C' =>  4} 
	     );

@@MM_DD_YYYY= ( 
	     {'month' =>  2},
	     {'day'   =>  2},
	     {'year'  =>  4} 
	     );

@@MM_DD_YY= ( 
	     {'month' =>  2},
	     {'day'   =>  2},
	     {'year'  =>  2} 
	     );

@@YY_MM_DD= ( 
	     {'year'  =>  2},
	     {'day'   =>  2},
	     {'month'  =>  2} 
	     );

@@YYYY_MM_DD= ( 
	     {'year'  =>  4},
	     {'month'   =>  2},
	     {'day'  =>  2} 
	     );

}

1;
@


1.24
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse/Parse/FixedLength.pm,v 1.23 1999/12/08 21:21:33 end70 Exp end70 $
d109 1
a109 1
	    print $_, " ", $parse_instruction->{$_},$/;
@


1.23
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.22 1999/12/08 21:16:34 end70 Exp end70 $
d58 1
a58 1
@@EXPORT    = qw(parse_FL quick_parse print_parsed);
d70 1
a70 1
There is one parsing routine: C<parse_FL()>.
d74 1
a74 1
=item parse_FL()
d99 1
a99 1
sub parse_FL {
d128 1
a128 1
    parse_FL($string_to_parse,
a130 8
}

sub parse_us_dob {
    my ($string_to_parse, $hash_ref) = @@_;
    my $offset=0;
    
    quick_parse("us_dob", $string_to_parse, $hash_ref);

@


1.22
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.21 1999/12/08 20:55:20 end70 Exp end70 $
d221 1
a221 1
	     {'date'  =>  2} 
@


1.21
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.20 1999/12/08 20:43:12 end70 Exp end70 $
d200 1
a200 1
@@us_dob= ( 
d203 1
a203 1
	     {'year'  =>  2} 
d206 1
a206 1
@@us_dob_long_year= ( 
d209 1
a209 1
	     {'year'  =>  4} 
d212 1
a212 1
@@year_first_date= ( 
d218 1
a218 1
@@year_first_date_long_year= ( 
d220 2
a221 2
	     {'day'   =>  2},
	     {'month'  =>  2} 
@


1.20
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.19 1999/12/08 20:41:52 end70 Exp end70 $
d215 1
a215 1
	     {'year'  =>  2} 
d221 1
a221 1
	     {'year'  =>  2} 
@


1.19
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.18 1999/12/08 20:38:29 end70 Exp end70 $
a104 4
    sub add_to_parse_record {
	$parse_record .= "\n\t/$_/ $parsed_string";
    }

d114 1
@


1.18
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.17 1999/12/08 20:37:36 end70 Exp end70 $
d198 3
a200 3
	     {'1' =>  3},
	     {'2' =>  2},
	     {'3' =>  4} 
@


1.17
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.16 1999/12/08 20:37:27 end70 Exp end70 $
d109 1
a109 1
    $parse_record="Parsed [$string_to_parse] into $hash_ref: ";
@


1.16
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.15 1999/12/08 20:36:50 end70 Exp end70 $
d109 1
a109 1
    $parse_record="Parsed [$string_to_parse] into $parse_instruction_ref: ";
@


1.15
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.14 1999/12/08 20:35:38 end70 Exp end70 $
d109 1
a109 1
    $parse_record="Parse of [$string_to_parse] as $parse_instruction_ref: ";
@


1.14
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.13 1999/12/08 20:34:57 end70 Exp end70 $
d109 1
a109 1
    $parse_record="[$string_to_parse]: ";
@


1.13
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.12 1999/12/08 20:33:12 end70 Exp end70 $
d148 1
a148 1
There is one diagnostics routine: C<print_parsed()>.
d155 3
@


1.12
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.11 1999/12/08 20:32:50 end70 Exp end70 $
a158 18
}

#=======================================================================
sub quick_parse {
    my ($name_of_formatting_LOH, $string_to_parse, $hash_ref) = @@_;
    my $offset=0;

    parse_FL($string_to_parse,
	     $hash_ref,
	     \@@{$name_of_formatting_LOH});
}

sub parse_us_dob {
    my ($string_to_parse, $hash_ref) = @@_;
    my $offset=0;
    
    quick_parse("us_dob", $string_to_parse, $hash_ref);

@


1.11
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.10 1999/12/08 20:08:17 end70 Exp end70 $
d58 1
a58 1
@@EXPORT    = qw(parse_FL quick_parse);
@


1.10
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.9 1999/12/08 19:05:27 end70 Exp end70 $
d61 1
a61 1
#	Non-Private Global Variables
d63 1
a63 1
@@us_phone;
d102 9
a110 1
    
d115 2
a116 2
	    print substr($string_to_parse, $offset, $length), $/;
	    $hash_ref->{$_}=substr($string_to_parse, $offset, $length);
d118 1
d122 2
d131 35
@


1.9
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.8 1999/12/08 18:59:33 end70 Exp end70 $
d182 12
@


1.8
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.7 1999/12/08 18:58:33 end70 Exp end70 $
d58 1
a58 1
@@EXPORT    = qw(parse_FL parse_us_phone);
d85 8
a92 1
which to store parsing results.
d125 1
a125 14
sub parse_us_phone {
    my ($string_to_parse, $hash_ref) = @@_;
    my $offset=0;
    
=head1
    parse_FL($string_to_parse,
	     $hash_ref,
	     \@@us_phone);
=cut
    quick_parse("us_phone", $string_to_parse, $hash_ref);

}

sub parse_us_ssan {
d129 1
a129 1
    quick_parse("us_ssan", $string_to_parse, $hash_ref);
d170 12
@


1.7
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.6 1999/12/08 18:25:36 end70 Exp end70 $
d128 8
@


1.6
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.5 1999/12/08 18:24:39 end70 Exp end70 $
d58 1
a58 1
@@EXPORT    = qw(parse_FL);
d63 1
d77 1
a77 1
list of lists and stores the results of fixed length parsing into the hash 
d80 6
d107 1
d109 21
d158 12
a169 1
    ;
@


1.5
log
@*** empty log message ***
@
text
@d2 1
a2 1
$rcsid="'$Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.4 1999/12/08 18:16:47 end70 Exp end70 $";
@


1.4
log
@*** empty log message ***
@
text
@d2 1
a2 1
$rcsid='$Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.3 1999/12/08 18:15:26 end70 Exp end70 $;
@


1.3
log
@*** empty log message ***
@
text
@d2 1
a2 1
$rcsid='$Header: /usr/end70/mnt/admin/perl/Parse-FixedLength-1.00/Parse/FixedLength.pm,v 1.2 1999/12/08 18:15:05 end70 Exp end70 $;
d19 1
a19 1
	       {'number',   => 4} ] );
@


1.2
log
@*** empty log message ***
@
text
@d2 2
a3 1
$rcsid='$Header$;
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1

@
