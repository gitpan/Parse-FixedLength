head	1.11;
access;
symbols;
locks; strict;
comment	@# @;


1.11
date	99.12.09.02.22.32;	author end70;	state Exp;
branches;
next	1.10;

1.10
date	99.12.09.01.22.10;	author end70;	state Exp;
branches;
next	1.9;

1.9
date	99.12.09.01.21.32;	author end70;	state Exp;
branches;
next	1.8;

1.8
date	99.12.09.01.05.07;	author end70;	state Exp;
branches;
next	1.7;

1.7
date	99.12.09.00.56.35;	author end70;	state Exp;
branches;
next	1.6;

1.6
date	99.12.09.00.15.01;	author end70;	state Exp;
branches;
next	1.5;

1.5
date	99.12.09.00.14.21;	author end70;	state Exp;
branches;
next	1.4;

1.4
date	99.12.09.00.09.21;	author end70;	state Exp;
branches;
next	1.3;

1.3
date	99.12.09.00.00.36;	author end70;	state Exp;
branches;
next	1.2;

1.2
date	99.12.08.23.27.04;	author end70;	state Exp;
branches;
next	1.1;

1.1
date	99.12.08.22.48.50;	author end70;	state Exp;
branches;
next	;


desc
@@


1.11
log
@*** empty log message ***
@
text
@#-----------------------------------------------------------------------
# $Header: /usr/end70/mnt/admin/perl/Parse/Parse/FixedDelimiter.pm,v 1.10 1999/12/09 01:22:10 end70 Exp end70 $

=head1 NAME

Parse::FixedDelimiter - parse a string containing a fixed delimiter into
component parts

=head1 SYNOPSIS

    use Parse::FixedDelimiter;
    
    $phone_number=803-781-4191;
    Parse::FixedDelimiter::parse($phone_number,
				 \%moms_phone, 
				 '-',
				 [ 'area_code', 'exchange', 'number' ]);

    for (keys %moms_phone) {
      print $_, " ", $moms_phone{$_}, $/;
    }


    # yields $moms_phone{area_code} == 803
    #        $moms_phone{exchange}  == 781
    #        $moms_phone{number}    == 4191

    
=cut

#-----------------------------------------------------------------------

package Parse::FixedDelimiter;
#use strict;

#-----------------------------------------------------------------------

=head1 DESCRIPTION

The C<Parse::FixedDelimiter> module facilitates the process of breaking
a string into its fixed-length components.

=cut

#-----------------------------------------------------------------------

require Exporter;
use Carp;

#-----------------------------------------------------------------------
#	Public Global Variables
#-----------------------------------------------------------------------
use vars qw($VERSION @@ISA @@EXPORT @@EXPORT_OK);
$VERSION   = '1.00';
@@ISA       = qw(Exporter);
@@EXPORT    = qw();

#-----------------------------------------------------------------------
#	Global Variables for Program Use 
#-----------------------------------------------------------------------
@@parse_record=();


#=======================================================================

=head1 PARSING ROUTINES

There are two parsing routines: C<parse()> and C<quick_parse>.

=over 8

=item parse()

This function takes a string, a reference to a hash and a reference to a 
list of hashes and stores the results of fixed length parsing into the hash 
reference passed in.

=item quick_parse()

This function takes the name of a pre-packaged datatype, a string, a reference to a hash 
and stores the results of fixed length parsing into the hash 
reference passed in.

=cut

#=======================================================================
sub parse {
    my ($string_to_parse, $hash_ref, $delimiter, $parse_fields) = @@_;
    my $offset=0;
    my $parse_record;
    my @@parsed_string;

    $parse_record="Parsed [$string_to_parse] into ";

    @@parsed_string = split "$delimiter", $string_to_parse;
    my $i;
    for (@@{$parse_fields}) {
	$hash_ref->{$_}=$parsed_string[$i++];
    }

    $parse_record .= join " ",  @@parsed_string;

    push @@parse_record, $parse_record;

}

sub quick_parse {
    my ($data_type, $string_to_parse, $hash_ref) = @@_;

    my ($parse_fields, $delimiter) = @@{$data_type};

#    print "parse ($string_to_parse, $hash_ref, $delimiter, $parse_fields)\n";
    parse ($string_to_parse, $hash_ref, $parse_fields, $delimiter);
}

#=======================================================================

=head1 DIAGNOSTIC ROUTINES

There is one diagnostic routine: C<print_parsed()>.

=over 8

=item print_parsed()

This function prints all parses performed.

=back
=cut

#=======================================================================
sub print_parsed {
    map { print "$_\n" } (@@parse_record);
}



#-----------------------------------------------------------------------

=head1 EXAMPLES

see SYNOPSIS

=head1 AUTHOR

Terrence Brannon E<lt>tbrannon@@end70.comE<gt>

=head1 COPYRIGHT

Copyright (c) 1999 End70 Corporation

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=cut

#-----------------------------------------------------------------------

#=======================================================================
# initialisation code - stuff the DATA into the CODES hash
#=======================================================================
{
    @@us_phone  = ( '-', [ 'area_code', 'exchange', 'number' ] );
    @@us_ssan   = ( '-', [ 'A', 'B', 'C' ] );
    @@MM_DD_YYYY= ( '-', [ 'month', 'day', 'year' ] );
    @@MM_DD_YY  = ( '-', [ 'month', 'day', 'year' ] );
    @@YY_MM_DD  = ( '-', [ 'year',  'day', 'month' ] );
    @@YYYY_MM_DD= ( '-', [ 'year', 'month', 'day' ] );
}

1;
@


1.10
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse/Parse/FixedDelimiter.pm,v 1.9 1999/12/09 01:21:32 end70 Exp end70 $
d112 1
a112 1
    print "parse ($string_to_parse, $hash_ref, $delimiter, $parse_fields)\n";
@


1.9
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse/Parse/FixedDelimiter.pm,v 1.8 1999/12/09 01:05:07 end70 Exp end70 $
d113 1
a113 1
    parse ($string_to_parse, $hash_ref, $delimiter, $parse_fields);
@


1.8
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse/Parse/FixedDelimiter.pm,v 1.7 1999/12/09 00:56:35 end70 Exp end70 $
d112 1
@


1.7
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse/Parse/FixedDelimiter.pm,v 1.6 1999/12/09 00:15:01 end70 Exp end70 $
d98 1
a98 1
	$hash_ref->{$_}=$parsed_string[++$i];
@


1.6
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse/Parse/FixedDelimiter.pm,v 1.5 1999/12/09 00:14:21 end70 Exp end70 $
d98 1
a98 1
	${$_}=$parsed_string[++$i];
@


1.5
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse/Parse/FixedDelimiter.pm,v 1.4 1999/12/09 00:09:21 end70 Exp end70 $
d166 1
a166 1
    @@YY_MM_DD  = ( '-', [ 'year',  day', 'month' ] );
@


1.4
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse/Parse/FixedDelimiter.pm,v 1.3 1999/12/09 00:00:36 end70 Exp end70 $
d107 7
@


1.3
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse/Parse/FixedDelimiter.pm,v 1.2 1999/12/08 23:27:04 end70 Exp end70 $
d155 6
a160 36
@@us_phone= ( 
	     {'area_code' => 3},
	     {'exchange'  => 3},
	     {'number'    => 4} 
	     );

@@us_ssan= ( 
	     {'A' =>  3},
	     {'B' =>  2},
	     {'C' =>  4} 
	     );

@@MM_DD_YYYY= ( 
	     {'month' =>  2},
	     {'day'   =>  2},
	     {'year'  =>  4} 
	     );

@@MM_DD_YY= ( 
	     {'month' =>  2},
	     {'day'   =>  2},
	     {'year'  =>  2} 
	     );

@@YY_MM_DD= ( 
	     {'year'  =>  2},
	     {'day'   =>  2},
	     {'month'  =>  2} 
	     );

@@YYYY_MM_DD= ( 
	     {'year'  =>  4},
	     {'month'   =>  2},
	     {'day'  =>  2} 
	     );

@


1.2
log
@*** empty log message ***
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse/Parse/FixedDelimiter.pm,v 1.1 1999/12/08 22:48:50 end70 Exp end70 $
d68 1
a68 1
There is one parsing routine: C<parse()>.
d78 6
d93 1
a93 1
    $parse_record="Parsed [$string_to_parse]: ";
d101 1
a101 1
    $parse_record .= join "\n\t/",  @@parsed_string;
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
# $Header: /usr/end70/mnt/admin/perl/Parse/Parse/FixedDelimeter.pm,v 1.1 1999/12/08 22:48:04 end70 Exp end70 $
d6 1
a6 1
Parse::FixedLength - parse a string containing fixed length fields into
d11 1
a11 1
    use Parse::FixedLength;
d13 5
a17 7
    $phone_number=8037814191;
    parse_FL($phone_number,
	     \%moms_phone, 
	     [ 
	       {'area_code' => 3},
	       {'exchange'  => 3},
	       {'number'    => 4} ] );
d33 1
a33 1
package Parse::FixedLength;
d40 1
a40 1
The C<Parse::FixedLength> module facilitates the process of breaking
d56 1
a56 1
@@EXPORT    = qw(parse_FL quick_parse print_parsed);
d68 1
a68 1
There is one parsing routine: C<parse_FL()>.
d72 1
a72 1
=item parse_FL()
a77 16
=item quick_parse()

To facilitate the parsing of certain common fixed-length strings, the
C<quick_parse()> function takes the name of an LOH (list of hashes) 
containing formatting information, a string, and a reference to a hah in 
which to store parsing results. The currently available formatting routines
are:

=over 4
item * C<@@us_phone> 
item * C<@@us_ssan> 
item * C<@@us_dob> 
item * C<@@us_dob_long_year> 

=back

d81 2
a82 2
sub parse_FL {
    my ($string_to_parse, $hash_ref, $parse_instruction_ref) = @@_;
d85 1
a85 1
    my $parsed_string;
d89 4
a92 10
    foreach $parse_instruction (@@{$parse_instruction_ref}) {
	for (keys %{$parse_instruction}) {
	    print $_, " ", $parse_instruction->{$_},$/;
	    my $length=$parse_instruction->{$_};
	    $parsed_string=substr($string_to_parse, $offset, $length), $/;
	    $hash_ref->{$_}=$parsed_string;
	    $offset += $length;
	    $parse_record .= "\n\t/$_/ $parsed_string";
	    add_to_parse_record;
	}
d95 2
a100 17
#=======================================================================
sub quick_parse {
    my ($name_of_formatting_LOH, $string_to_parse, $hash_ref) = @@_;
    my $offset=0;
    
    parse_FL($string_to_parse,
	     $hash_ref,
	     \@@{$name_of_formatting_LOH});
}

sub parse_us_dob {
    my ($string_to_parse, $hash_ref) = @@_;
    my $offset=0;
    
    quick_parse("us_dob", $string_to_parse, $hash_ref);

}
@
